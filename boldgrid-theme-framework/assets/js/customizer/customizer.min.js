/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/customizer/customizer.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/customizer/color/palette-selector.js":
/*!********************************************************!*\
  !*** ./assets/js/customizer/color/palette-selector.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.PaletteSelector = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PaletteSelector =\n/*#__PURE__*/\nfunction () {\n  function PaletteSelector() {\n    _classCallCheck(this, PaletteSelector);\n  }\n\n  _createClass(PaletteSelector, [{\n    key: \"getColor\",\n\n    /**\n     * Get the color value for the palette selector control.\n     *\n     * @since 2.0.0\n     *\n     * @param  {string} themeMod Theme mod value.\n     * @return {string}       HEX, RGB, RGBA value.\n     */\n    value: function getColor(themeMod) {\n      return themeMod.split(':').pop();\n    }\n    /**\n     * Get the color number for the palette selector control.\n     *\n     * @since 2.0.0\n     *\n     * @param  {string} themeMod Theme mod value.\n     * @return {string} Color number.\n     */\n\n  }, {\n    key: \"getColorNumber\",\n    value: function getColorNumber(themeMod) {\n      return themeMod.split(':').shift();\n    }\n  }]);\n\n  return PaletteSelector;\n}();\n\nexports.PaletteSelector = PaletteSelector;\nvar _default = PaletteSelector;\nexports.default = _default;\n\n//# sourceURL=webpack:///./assets/js/customizer/color/palette-selector.js?");

/***/ }),

/***/ "./assets/js/customizer/color/preview.js":
/*!***********************************************!*\
  !*** ./assets/js/customizer/color/preview.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Preview = void 0;\n\nvar _paletteSelector = _interopRequireDefault(__webpack_require__(/*! ./palette-selector */ \"./assets/js/customizer/color/palette-selector.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar $ = jQuery;\n\nvar Preview =\n/*#__PURE__*/\nfunction () {\n  function Preview() {\n    _classCallCheck(this, Preview);\n\n    this.classControls = [{\n      name: 'bgtfw_header_links',\n      selector: '#navi-wrap',\n      properties: ['link-color']\n    }, {\n      name: 'bgtfw_footer_color',\n      selector: '#colophon, .footer-content',\n      properties: ['background-color', 'text-default']\n    }, {\n      name: 'bgtfw_tagline_color',\n      selector: '.site-description',\n      properties: ['color']\n    }, {\n      name: 'bgtfw_site_title_color',\n      selector: '.site-title',\n      properties: ['color']\n    }, {\n      name: 'bgtfw_footer_links',\n      selector: '.footer-content',\n      properties: ['link-color']\n    }];\n  }\n  /**\n   * Class initialized.\n   *\n   * @since 2.0.0\n   *\n   * @return {Preview} Class instance.\n   */\n\n\n  _createClass(Preview, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      $(function () {\n        return _this._onLoad();\n      });\n      return this;\n    }\n    /**\n     * Handles front-end color changes in previewer.\n     *\n     * This will add classes for color changes to elements during a live preview.\n     *\n     * @since 2.0.0\n     *\n     * @param string themeMod Theme mod to use for retrieving a background color.\n     * @param string selector CSS selector to apply classes to.\n     * @param array  list of properties to add.\n     */\n\n  }, {\n    key: \"outputColor\",\n    value: function outputColor(themeMod, selector, properties) {\n      var colorClassPrefix,\n          $selector = $(selector),\n          regex = new RegExp('color-?([\\\\d]|neutral)\\-(' + properties.join('|') + ')(\\\\s+|$)', 'g');\n      themeMod = parent.wp.customize(themeMod)();\n\n      if (!themeMod || 'none' === themeMod) {\n        themeMod = '';\n      }\n\n      $selector.removeClass(function (index, css) {\n        return (css.match(regex) || []).join(' ');\n      }); // Get class prefix.\n\n      colorClassPrefix = new _paletteSelector.default().getColorNumber(themeMod); // Add all classes.\n\n      $selector.addClass(_.map(properties, function (property) {\n        var prefix = colorClassPrefix; // If neutral or link-color, do not remove color hyphen.\n\n        if (-1 === colorClassPrefix.indexOf('neutral') && -1 === property.indexOf('link-color')) {\n          prefix = colorClassPrefix.replace('-', '');\n        }\n\n        return prefix + '-' + property;\n      }).join(' '));\n    }\n    /**\n     * Get the css used for headin colors.\n     *\n     * @since 2.0.0\n     *\n     * @param  {string} to Them mod value.\n     * @return {string}    CSS for headings.\n     */\n\n  }, {\n    key: \"getHeadingCSS\",\n    value: function getHeadingCSS(to) {\n      var color = new _paletteSelector.default().getColor(to);\n      var css = '',\n          headingSelectors = [];\n\n      if (color) {\n        headingSelectors = this.getHeadingColorSelectors().join(', ');\n        css = \"\\n\\t\\t\\t\\t\".concat(headingSelectors, \" {\\n\\t\\t\\t\\t\\tcolor: \").concat(color, \";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\");\n      }\n\n      return css;\n    }\n    /**\n     * Get a list of heading selectors from the global.\n     *\n     * @since 2.0.0\n     *\n     * @return {array} list of selectors.\n     */\n\n  }, {\n    key: \"getHeadingColorSelectors\",\n    value: function getHeadingColorSelectors() {\n      var selectors = [];\n\n      _.each(_typographyOptions, function (value, key) {\n        if ('headings' === value.type) {\n          selectors.push(key);\n        }\n      });\n\n      return selectors;\n    }\n    /**\n     * Create or update stylesheet in the head of the preview iframe.\n     *\n     * @since 2.0.0\n     *\n     * @param  {string} id  ID of the style tag.\n     * @param  {string} css CSS for the style tag.\n     * @return {jQuery}     DOM element.\n     */\n\n  }, {\n    key: \"updateDynamicStyles\",\n    value: function updateDynamicStyles(id, css) {\n      var $head = $('head');\n      var $selector = $head.find('#' + id);\n\n      if ($selector.length) {\n        $selector.html(css);\n      } else {\n        $selector = $('<style type=\"text/css\" id=\"' + id + '\">');\n        $selector.html(css);\n        $head.append($selector);\n      }\n\n      return $selector;\n    }\n    /**\n     * Use the theme mod saved for a heading color to set the heading colors.\n     *\n     * @since 2.0.0\n     */\n\n  }, {\n    key: \"setHeadingColors\",\n    value: function setHeadingColors() {\n      var css = this.getHeadingCSS(wp.customize('bgtfw_headings_color')());\n      this.updateDynamicStyles('bgtfw_headings_color', css);\n    }\n    /**\n     * Events to run when the Dom loads.\n     *\n     * @since 2.0.0\n     */\n\n  }, {\n    key: \"_onLoad\",\n    value: function _onLoad() {\n      // Set Defaults.\n      this.setHeadingColors(); // Setup event handlers.\n\n      this._bindConfiguredControls();\n\n      this._bindHeadingColor();\n    }\n    /**\n     * Bind all color class controls given through class property.\n     *\n     * @since 2.0.0\n     */\n\n  }, {\n    key: \"_bindConfiguredControls\",\n    value: function _bindConfiguredControls() {\n      var _this2 = this;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var control = _step.value;\n          wp.customize(control.name, function (value) {\n            value.bind(function () {\n              return _this2.outputColor(control.name, control.selector, control.properties);\n            });\n          });\n        };\n\n        for (var _iterator = this.classControls[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    /**\n     * Bind the change events for heading colors changing.\n     *\n     * @since 2.0.0\n     */\n\n  }, {\n    key: \"_bindHeadingColor\",\n    value: function _bindHeadingColor() {\n      var _this3 = this;\n\n      wp.customize('bgtfw_headings_color', function (value) {\n        value.bind(function () {\n          return _this3.setHeadingColors();\n        });\n      });\n    }\n  }]);\n\n  return Preview;\n}();\n\nexports.Preview = Preview;\nvar _default = Preview;\nexports.default = _default;\n\n//# sourceURL=webpack:///./assets/js/customizer/color/preview.js?");

/***/ }),

/***/ "./assets/js/customizer/customizer.js":
/*!********************************************!*\
  !*** ./assets/js/customizer/customizer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _preview = _interopRequireDefault(__webpack_require__(/*! ./color/preview */ \"./assets/js/customizer/color/preview.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BOLDGRID = BOLDGRID || {};\nBOLDGRID.Customizer = BOLDGRID.Customizer || {};\nBOLDGRID.Customizer.Util = BOLDGRID.Customizer.Util || {};\nBOLDGRID.Customizer.Widgets = BOLDGRID.Customizer.Widgets || {};\n/**\n * Check if the string is valid JSON by the use of regular expressions.\n * This security method is called internally.\n *\n * Examples:\n *\n *  bgtfwIsJSON( 'something' );\n *      // -> false\n *\n *  bgtfwIsJSON( \"\\\"something\\\"\");\n *      // -> true\n *\n *  bgtfwIsJSON( \"{ foo: 2 }\");\n *      // -> false\n *\n *  bgtfwIsJSON( \"{ \\\"foo\\\": 2 }\" );\n *      // -> true\n *\n * @param {string} string String to test for valid JSON syntax.\n *\n * @return {Boolean} True if string contains valid JSON, false on failure.\n */\n\nBOLDGRID.Customizer.Util.bgtfwIsJSON = function (string) {\n  // Check if string is a string, and not an empty one.\n  if (!_.isString(string) || /^\\s*$/.test(string)) {\n    return false;\n  } // Validate that the string is valid format for being JSON.\n\n\n  string = string.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');\n  string = string.replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']');\n  string = string.replace(/(?:^|:|,)(?:\\s*\\[)+/g, '');\n  return /^[\\],:{}\\s]*$/.test(string);\n};\n/**\n * Parse JSON safely.\n *\n * Ensure that the param passed is valid JSON, and attempt\n * to return the object back.  This returns false in the event\n * that it can't be parsed or isn't valid JSON.\n *\n * @param {string} string String to parse JSON from.\n *\n * @return {mixed} Returns object if JSON was parsed, or false.\n */\n\n\nBOLDGRID.Customizer.Util.bgtfwParseJSON = function (string) {\n  var data;\n\n  if (BOLDGRID.Customizer.Util.bgtfwIsJSON(string)) {\n    try {\n      data = JSON.parse(string);\n\n      if (data && _.isObject(data)) {\n        return data;\n      }\n    } catch (error) {\n      // console.warn( 'An error retrieving the active color palette occured!', error );\n      return false;\n    }\n  }\n\n  return false;\n};\n\nBOLDGRID.Customizer.Util.getInitialPalettes = function (option) {\n  var palette, colors, activePalette; // Default value is read from the customizer API if new data is not passed.\n\n  if (_.isUndefined(option)) {\n    option = wp.customize('boldgrid_color_palette')();\n  } // Parse the JSON data.\n\n\n  palette = BOLDGRID.Customizer.Util.bgtfwParseJSON(option); // Ensure it's formatted correctly and get the active palette's colors as an array.\n\n  if (palette && !_.isUndefined(palette.state) && !_.isUndefined(palette.state.palettes)) {\n    if (!_.isUndefined(palette.state['active-palette'])) {\n      activePalette = palette.state['active-palette'];\n\n      if (!_.isUndefined(palette.state.palettes[activePalette])) {\n        activePalette = palette.state.palettes[activePalette];\n\n        if (!_.isUndefined(activePalette.colors)) {\n          colors = activePalette.colors; // Check if theme included a neutral color, and add it to palette.\n\n          if (!_.isUndefined(activePalette['neutral-color'])) {\n            colors.push(activePalette['neutral-color']);\n          } // Update the wpColorPicker options for initialization.\n\n\n          if (colors.length) {\n            return colors;\n          }\n        }\n      }\n    }\n  } // Unable to get the active palette set.\n\n\n  return false;\n};\n/**\n * Theme Customizer enhancements for a better user experience.\n *\n * Contains handlers to make Theme Customizer preview reload changes asynchronously.\n */\n\n\n(function ($) {\n  var $body, $customStyles, colorPreview;\n  $body = $('body');\n  $customStyles = $('#boldgrid-override-styles');\n  colorPreview = new _preview.default().init();\n  $(function () {\n    var bgtfwCalculateLayouts, updateColorAndPatterns, headingsColorOutput, setupPostEditLink, backgroundTypeUpdate, backgroundSizeUpdate, backgroundAttachmentUpdate, setBackgroundVerticalPosition, setBackgroundHorizontalPosition, backgroundImageUpdate, backgroundRepeatUpdate, initValues, attributionLinks, attributionSeparators, attributionControls;\n    /**\n     * Force recalculation of layouts helper.\n     *\n     * @since 2.0.0\n     */\n\n    bgtfwCalculateLayouts = function bgtfwCalculateLayouts() {\n      if (!!wp.customize('bgtfw_fixed_header')()) {\n        BoldGrid.header_fixed.calc();\n      } else {\n        BoldGrid.custom_header.calc();\n      }\n    };\n    /**\n     * Allow the user to click the post edit link in the customizer and go to the editor\n     */\n\n\n    setupPostEditLink = function setupPostEditLink() {\n      $('.post-edit-link').on('click', function () {\n        parent.location = $(this).attr('href');\n      });\n    };\n\n    backgroundTypeUpdate = function backgroundTypeUpdate(to) {\n      if ('pattern' === to) {\n        updateColorAndPatterns();\n      } else {\n        $body.css({\n          'background-image': '',\n          'background-size': '',\n          'background-repeat': '',\n          'background-attachment': ''\n        });\n        initValues();\n      } // Remove these styles that should only overwrite on the front end.\n\n\n      $customStyles.remove();\n    };\n\n    backgroundSizeUpdate = function backgroundSizeUpdate(to) {\n      $body.css('background-size', to);\n    };\n\n    backgroundAttachmentUpdate = function backgroundAttachmentUpdate(to) {\n      var pluginStellarData;\n\n      if ('parallax' === to) {\n        $body.addClass('boldgrid-customizer-parallax-effect');\n        $body.css('background-attachment', 'fixed');\n        $body.css({\n          'background-position': '0px 0px',\n          'background-attachment': 'fixed'\n        });\n        $body.data('stellar-background-ratio', '0.2');\n        $body.stellar();\n\n        if ($body.data('plugin_stellar')) {\n          $body.data('plugin_stellar').init();\n        }\n      } else {\n        pluginStellarData = $('body').data('plugin_stellar');\n\n        if (pluginStellarData) {\n          pluginStellarData.destroy();\n        }\n\n        backgroundSizeUpdate(wp.customize('boldgrid_background_image_size')());\n        $body.css({\n          'background-attachment': to\n        });\n        setBackgroundVerticalPosition();\n        setBackgroundHorizontalPosition();\n        backgroundRepeatUpdate();\n        $body.removeClass('boldgrid-customizer-parallax-effect');\n      }\n    };\n    /**\n     * Set the theme background_vertical_position on the preview frame\n     */\n\n\n    setBackgroundVerticalPosition = function setBackgroundVerticalPosition() {\n      var to, curBackgroundPos, backgroundPos;\n      to = wp.customize('boldgrid_background_vertical_position')();\n      curBackgroundPos = $body.css('background-position');\n      backgroundPos = curBackgroundPos.split(' ')[0] + ' ' + to * 5 + 'px';\n      $body.css('background-position', backgroundPos);\n    };\n    /**\n     * Set the theme background_horizontal_position on the preview frame\n     */\n\n\n    setBackgroundHorizontalPosition = function setBackgroundHorizontalPosition() {\n      var to, curBackgroundPos, backgroundPos;\n      to = wp.customize('boldgrid_background_horizontal_position')();\n      curBackgroundPos = $body.css('background-position');\n      backgroundPos = to * 5 + 'px' + ' ' + curBackgroundPos.split(' ')[1];\n      $body.css('background-position', backgroundPos);\n    };\n    /**\n     * Handles front-end headings color changes in previewer.\n     *\n     * This will add classes for the headings color changes to elements during a live preview.\n     * The headings makes use of the global _typographyOptions which contains the selectors\n     * defined in the PHP configurations for bgtfw.\n     *\n     * @since 2.0.0\n     *\n     * @param string to       Theme mod value of headings color.\n     * @param string selector CSS selector to apply classes to.\n     */\n\n\n    headingsColorOutput = function headingsColorOutput(themeMod, section) {\n      var selectors = [];\n\n      _.each(_typographyOptions, function (value, key) {\n        if ('headings' === value.type) {\n          selectors.push(section + ' ' + key);\n        }\n      });\n\n      selectors = selectors.join(', ');\n      colorPreview.outputColor(themeMod, $(selectors).not('.site-description'), ['color']);\n    };\n    /**\n     * Set the theme updateColorAndPatterns on the preview frame\n     */\n\n\n    updateColorAndPatterns = function updateColorAndPatterns() {\n      var backgroundPattern;\n      backgroundPattern = wp.customize('boldgrid_background_pattern')();\n\n      if (!backgroundPattern) {\n        backgroundPattern = 'none';\n      }\n\n      $customStyles.remove();\n      $body.css({\n        'background-image': backgroundPattern,\n        'background-size': 'auto',\n        'background-repeat': 'repeat',\n        'background-attachment': 'scroll'\n      });\n      colorPreview.outputColor('boldgrid_background_color', 'body', ['background-color', 'text-default']);\n    };\n\n    backgroundImageUpdate = function backgroundImageUpdate(to) {\n      if (!to) {\n        to = '';\n      } else {\n        to = 'url(' + to + ')';\n      }\n\n      $body.css({\n        'background-image': to\n      });\n    };\n\n    backgroundRepeatUpdate = function backgroundRepeatUpdate() {\n      $body.css({\n        'background-repeat': wp.customize('background_repeat')()\n      });\n    };\n\n    initValues = function initValues() {\n      var bgAttach, bgImgSize, bgType, bgImage;\n      $('#custom-background-css').remove();\n      updateColorAndPatterns();\n      bgType = wp.customize('boldgrid_background_type')();\n\n      if ('pattern' !== bgType) {\n        bgAttach = wp.customize('background_attachment')();\n        bgImgSize = wp.customize('boldgrid_background_image_size')();\n        backgroundAttachmentUpdate(bgAttach);\n        backgroundSizeUpdate(bgImgSize);\n        bgImage = wp.customize('background_image')();\n        backgroundImageUpdate(bgImage);\n\n        if ('parallax' !== bgAttach) {\n          setBackgroundVerticalPosition();\n          setBackgroundHorizontalPosition();\n          backgroundRepeatUpdate();\n        }\n      }\n    };\n\n    attributionLinks = function attributionLinks() {\n      var controls;\n      wp.customize.bind('ready', _.defer(function () {\n        if (_.isFunction(parent.wp.customize.section)) {\n          controls = parent.wp.customize.section('boldgrid_footer_panel').controls();\n\n          _(controls).each(function (control) {\n            var selector,\n                regex = new RegExp(/^(hide_)+\\w*(_attribution)+$/, 'm');\n\n            if (regex.test(control.id)) {\n              if (!!parseInt(wp.customize(control.id)())) {\n                selector = '.' + control.id.replace('hide_', '').replace(/_/g, '-') + '-link';\n                $(selector).addClass('hidden');\n              }\n            }\n          });\n        }\n\n        attributionSeparators();\n      }));\n    };\n    /**\n     * Responsible for adjusting the separators in live preview for attribution footer links.\n     */\n\n\n    attributionSeparators = function attributionSeparators() {\n      $('.attribution-theme-mods > .link').removeClass('no-separator').filter(':visible').last().addClass('no-separator');\n    };\n\n    if (_.isFunction(parent.wp.customize.section)) {\n      attributionControls = parent.wp.customize.section('boldgrid_footer_panel').controls();\n\n      _(attributionControls).each(function (control) {\n        var selector,\n            regex = new RegExp(/^(hide_)+\\w*(_attribution)+$/, 'm');\n\n        if (regex.test(control.id)) {\n          wp.customize(control.id, function (value) {\n            selector = '.' + control.id.replace(/hide_/, '').replace(/_/g, '-') + '-link';\n            value.bind(function (to) {\n              if (!to) {\n                $(selector).removeClass('hidden');\n              } else {\n                $(selector).addClass('hidden');\n              }\n\n              attributionSeparators();\n            });\n          });\n        }\n      });\n    }\n\n    initValues();\n    attributionLinks();\n    setupPostEditLink();\n    $('.site-description').addClass(_typographyClasses); // Site title and description.\n\n    wp.customize('blogname', function (value) {\n      value.bind(function (to) {\n        $('.site-title a').text(to);\n        bgtfwCalculateLayouts();\n      });\n    }); // Custom logo changes need layout recalculated.\n\n    wp.customize.selectiveRefresh.bind('partial-content-rendered', function (placement) {\n      if ('custom_logo' === placement.partial.id || 'custom_header' === placement.partial.id) {\n        bgtfwCalculateLayouts();\n      }\n    });\n    /**\n     * There's a better way to do this, but I dunno what it is.  This\n     * works for now.  This will just trigger the preview pane to reload\n     * the same page after a user changes their header videos.\n     */\n\n    $.each(['external_header_video', 'header_video'], function (index, settingId) {\n      wp.customize(settingId, function (value) {\n        value.bind(function () {\n          wp.customize.preview.send('url', window.location.href);\n        });\n      });\n    });\n    /**\n     * Recalculate layouts on font changes.\n     *\n     * @since 2.0.0\n     */\n\n    $.each(['bgtfw_site_title_typography', 'bgtfw_tagline_typography'], function (index, settingId) {\n      wp.customize(settingId, function (value) {\n        value.bind(function (to) {\n          $.each(['font-size', 'line-height', 'font-family', 'font-weight'], function (index, control) {\n            if (value[control] !== to[control]) {\n              bgtfwCalculateLayouts();\n            }\n          });\n        });\n      });\n    });\n    wp.customize('blogdescription', function (value) {\n      value.bind(function (to) {\n        if (to) {\n          $('.site-description').text(to).removeClass('invisible');\n        } else {\n          $('.site-description').text('').addClass('invisible');\n        }\n\n        bgtfwCalculateLayouts();\n      });\n    });\n    /**\n     * Update classes for header position layouts.\n     */\n\n    wp.customize('bgtfw_header_layout_position', function (value) {\n      // Bind value change.\n      value.bind(function (to) {\n        var headerWidth; // Add CSS to elements.\n\n        $('body').removeClass('header-top header-left header-right').addClass(to);\n\n        if ('header-left' === to || 'header-right' === to) {\n          headerWidth = wp.customize('bgtfw_header_width')();\n          parent.kirkiSetSettingValue.set('bgtfw_header_width', headerWidth);\n        } // Trigger resize to recalculate header positioning when options are switched.\n\n\n        bgtfwCalculateLayouts();\n      });\n    });\n    /**\n     * Add controls for fixed/not fixed header.\n     */\n\n    wp.customize('bgtfw_fixed_header', function (value) {\n      // Bind value change.\n      value.bind(function (to) {\n        var body = $('body');\n        to ? body.addClass('header-fixed') : body.removeClass('header-fixed');\n        bgtfwCalculateLayouts();\n      });\n    });\n    /**\n     * Header layout control.\n     */\n\n    wp.customize('bgtfw_header_top_layouts', function (value) {\n      // Bind value change.\n      value.bind(function (to) {\n        $('#masthead').removeClass(function (index, className) {\n          return (className.match(/(^|\\s)layout-\\S+/g) || []).join(' ');\n        }).addClass(to);\n        bgtfwCalculateLayouts();\n      });\n    });\n    wp.customize('bgtfw_header_width', function (value) {\n      // Bind value change.\n      value.bind(function () {\n        bgtfwCalculateLayouts();\n      });\n    });\n    /**\n     * Footer layout control.\n     */\n\n    wp.customize('bgtfw_footer_layouts', function (value) {\n      // Bind value change.\n      value.bind(function (to) {\n        $('#colophon').removeClass(function (index, className) {\n          return (className.match(/(^|\\s)layout-\\S+/g) || []).join(' ');\n        }).addClass(to);\n      });\n    });\n    /**\n     * Update any of the color control's palettes with correct palette from color picker.\n     */\n\n    wp.customize('boldgrid_color_palette', function (value) {\n      value.bind(function (to) {\n        var palettes, colors;\n        palettes = parent.$('.colors-wrapper');\n        colors = BOLDGRID.Customizer.Util.getInitialPalettes(to); // Update any palettes on open colorpicker instances.\n\n        if (colors) {\n          _(palettes).each(function (palette) {\n            var swatches = $(palette).find('input');\n\n            _(swatches).each(function (swatch, index) {\n              var currentVal, newVal, link;\n              currentVal = $(swatch).val();\n              newVal = currentVal.substring(0, currentVal.indexOf(':') + 1) + colors[index];\n              $(swatch).val(newVal);\n              $(swatch).next().find('.color-palette-color').css('background', colors[index]).text(colors[index]); // Update setting link for control.\n\n              if ($(swatch).is(':checked')) {\n                link = $(swatch).data('customize-setting-link');\n\n                if (!_.isUndefined(link)) {\n                  parent.wp.customize(link).set(newVal);\n                }\n              }\n            });\n          });\n        }\n      });\n    });\n    wp.customize('custom_theme_css', function (value) {\n      value.bind(function (to) {\n        $('#boldgrid-custom-css').html(to);\n      });\n    });\n    /**\n     * Set vertical position of image\n     */\n\n    wp.customize('boldgrid_background_vertical_position', function (value) {\n      value.bind(setBackgroundVerticalPosition);\n    });\n    /**\n     * Set horizontal position of image\n     */\n\n    wp.customize('boldgrid_background_horizontal_position', function (value) {\n      value.bind(setBackgroundHorizontalPosition);\n    });\n    /**\n     * Add a background pattern\n     */\n\n    wp.customize('boldgrid_background_pattern', function (value) {\n      value.bind(updateColorAndPatterns);\n    });\n    /**\n     * Set body background and remove image\n     */\n\n    wp.customize('boldgrid_background_color', function (value) {\n      value.bind(updateColorAndPatterns);\n    });\n    /* Header Background Color */\n\n    wp.customize('bgtfw_header_color', function (value) {\n      value.bind(function (to) {\n        var style, head, css, color, alpha;\n        colorPreview.outputColor('bgtfw_header_color', '#masthead, #navi', ['background-color', 'text-default']);\n        color = to.split(':').pop();\n        alpha = parent.net.brehaut.Color(color);\n        css = '.header-left #main-menu, .header-right #main-menu { background-color: ' + alpha.setAlpha(0.7).toString() + '; }';\n        css += '@media (min-width: 768px) {';\n        css += '.sm-clean ul, .sm-clean ul a, .sm-clean ul a:hover, .sm-clean ul a:focus, .sm-clean ul a:active, .sm-clean ul a.highlighted, .sm-clean span.scroll-up, .sm-clean span.scroll-down, .sm-clean span.scroll-up:hover, .sm-clean span.scroll-down:hover { background-color:' + alpha.setAlpha(0.4).toString() + ';}';\n        css += '.sm-clean ul { border: 1px solid ' + alpha.setAlpha(0.4).toString() + ';}';\n        css += '.sm-clean > li > ul:before, .sm-clean > li > ul:after { border-color: transparent transparent ' + alpha.setAlpha(0.4).toString() + ' transparent;}';\n        css += '}'; // Set CSS in the innerHTML of stylesheet or create a new stylesheet to append to head.\n\n        if (!!document.getElementById('bgtfw-menu-colors')) {\n          document.getElementById('bgtfw-menu-colors').innerHTML = css;\n        } else {\n          head = document.head || document.getElementsByTagName('head')[0], style = document.createElement('style');\n          style.type = 'text/css';\n          style.id = 'bgtfw-menu-colors';\n\n          if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n          } else {\n            style.appendChild(document.createTextNode(css));\n          }\n\n          head.appendChild(style);\n        }\n      });\n    });\n    /* Header Headings Color */\n\n    wp.customize('bgtfw_header_headings_color', function (value) {\n      value.bind(function () {\n        headingsColorOutput('bgtfw_header_headings_color', '#navi-wrap > :not(.bgtfw-widget-row)');\n      });\n    });\n    /* Footer Headings Color */\n\n    wp.customize('bgtfw_footer_headings_color', function (value) {\n      value.bind(function () {\n        headingsColorOutput('bgtfw_footer_headings_color', '.site-footer :not(.bgtfw-widget-row)');\n      });\n    });\n    /**\n     * When updating background type reset all saved values\n     */\n\n    wp.customize('boldgrid_background_type', function (value) {\n      value.bind(backgroundTypeUpdate);\n    });\n    wp.customize('background_attachment', function (value) {\n      value.bind(backgroundAttachmentUpdate);\n    });\n    wp.customize('background_image', function (value) {\n      value.bind(backgroundImageUpdate);\n    });\n    wp.customize('background_repeat', function (value) {\n      value.bind(backgroundRepeatUpdate);\n    }); // Bind all generic control previews.\n\n    parent.wp.customize.control.each(function (wpControl) {\n      if (wpControl.params.choices && 'boldgrid_controls' === wpControl.params.choices.name) {\n        wp.customize(wpControl.id, function (value) {\n          value.bind(function (setting) {\n            colorPreview.updateDynamicStyles(wpControl.id, setting.css);\n          });\n        });\n      }\n    });\n    /**\n     * When updating background type reset all saved values\n     */\n\n    wp.customize('boldgrid_background_image_size', function (value) {\n      value.bind(backgroundSizeUpdate);\n    });\n    $(document).on('customize-preview-menu-refreshed', function (event, menu) {\n      $.each(menu.newContainer.closest('[data-is-parent-column]'), function () {\n        BOLDGRID.Customizer.Widgets.updatePartial($(this));\n\n        if ('secondary-menu' === menu.container_id && '' !== wp.customize('bgtfw_header_container')()) {\n          document.getElementById(menu.container_id).classList.add(wp.customize('bgtfw_header_container')());\n        }\n      });\n    }); // Reinitialize widgets when our sidebar areas are re-rendered.\n\n    wp.customize.selectiveRefresh.bind('partial-content-rendered', function (placement) {\n      // Only update when the dynamic widget sidebars are rerendered.\n      if ('boldgrid_header_widgets' !== placement.partial.id && 'boldgrid_footer_widgets' !== placement.partial.id) {\n        return;\n      }\n\n      BOLDGRID.Customizer.Widgets.updatePartial(placement.container);\n    });\n\n    BOLDGRID.Customizer.Widgets.updatePartial = function (selector) {\n      // Comment reply link.\n      selector.find('.comment-reply-link').addClass('btn button-primary color1-text-contrast').css('transition', 'all .5s'); // The WordPress Default Widgets.\n\n      selector.find('.widget_rss ul').addClass('media-list');\n      selector.find('.widget_meta ul, .widget_recent_entries ul, .widget_archive ul, .widget_categories ul, .widget_nav_menu ul, .widget_pages ul').addClass('nav');\n      selector.find('.widget_recent_comments ul#recentcomments').css({\n        'list-style': 'none',\n        'padding-left': '0'\n      });\n      selector.find('.widget_recent_comments ul#recentcomments li').css('padding', '5px 15px');\n      selector.find('table#wp-calendar').addClass('table table-striped');\n      selector.find('.sidebar select, select[name=\"archive-dropdown\"]').addClass('form-control');\n      selector.find('.sidebar .button').removeClass('button').addClass('btn button-primary'); // WooCommerce Widgets.\n\n      selector.find('.woocommerce.widget .ui-slider').css('display', 'none');\n      selector.find('.woocommerce.widget .ui-slider').css('display', 'block');\n      selector.find('.woocommerce.widget .ui-slider').addClass('color1-background-color').children().addClass('color2-background-color'); // Buttons.\n\n      selector.find('.button').removeClass('button').addClass('btn button-primary');\n      selector.find('.button.alt').removeClass('button alt').addClass('btn button-secondary');\n    }; // When menu partials are refreshed, we need to ensure we update the new container.\n\n\n    $(document).on('customize-preview-menu-refreshed', function (e, params) {\n      if (!_.isUndefined(BoldGrid)) {\n        if ('main' === params.wpNavMenuArgs.theme_location) {\n          if (!_.isUndefined(BoldGrid.standard_menu_enabled)) {\n            // Initialize SmartMenu on the updated container and params.\n            BoldGrid.standard_menu_enabled.init(params.newContainer);\n          }\n        }\n      }\n    });\n  });\n})(jQuery);\n\n//# sourceURL=webpack:///./assets/js/customizer/customizer.js?");

/***/ })

/******/ });