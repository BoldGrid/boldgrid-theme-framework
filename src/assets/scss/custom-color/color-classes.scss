@function hover($background, $color) {
	$style: '';
	$hover-color: '';
	$color-lightness: abs(lightness($color));
	$background-lightness: abs(lightness($background));

	@if $color-lightness == 100 {
		/* White */
		@if $background-lightness >= 90 {
			$hover-color: darken($background, 15);
		} @else {
			$hover-color: mix($color, $background, 80);
		}
	} @else if $color-lightness == 0 {
		/* Black */
		@if $background-lightness < 10 {
			$hover-color: lighten($background, 20);
		} @else {
			$hover-color: mix($color, $background, 60);
		}
	} @else if $background-lightness < $color-lightness {
		/* Light text on dark background */
		$style: 'lighten';
		@if $color-lightness > 90 {
			/* Color too light to lighten */
			$hover-color: darken($color, 20);
			$style: 'darken';
		} @else {
			$hover-color: lighten($color, 20);
		}
	} @else {
		/* Dark text on light background */
		$style: 'darken';
		@if $color-lightness < 15 {
			/* Color is too dark to further darken */
			$hover-color: lighten($color, 20);
			$style: 'lighten';
		} @else {
			$hover-color: darken($color, 20);
		}
	}

	@return $hover-color;
}

$ubtn-colors: ();
@if variable-exists( palette-primary_1 ) {
	$ubtn-colors: append($ubtn-colors,('color-1' $palette-primary_1 var(--color-1-text-contrast)));
	@if $ubtn-theme-color == 'palette-primary_1' {
		$ubtn-bgcolor: $palette-primary_1;
		$ubtn-font-color: var(--color-1-text-contrast);
	}
}
@if variable-exists( palette-primary_2  ) {
	$ubtn-colors: append($ubtn-colors,('color-2' $palette-primary_2 var(--color-2-text-contrast)));
	@if $ubtn-theme-color == 'palette-primary_2' {
		$ubtn-bgcolor: $palette-primary_2;
		$ubtn-font-color: var(--color-2-text-contrast);
	}
}
@if variable-exists( palette-primary_3 ) {
	$ubtn-colors: append($ubtn-colors,('color-3' $palette-primary_3 var(--color-3-text-contrast)));
	@if $ubtn-theme-color == 'palette-primary_3' {
		$ubtn-bgcolor: $palette-primary_3;
		$ubtn-font-color: var(--color-3-text-contrast);
	}
}
@if variable-exists( palette-primary_4 ) {
	$ubtn-colors: append($ubtn-colors,('color-4' $palette-primary_4 var(--color-4-text-contrast)));
	@if $ubtn-theme-color == 'palette-primary_4' {
		$ubtn-bgcolor: $palette-primary_4;
		$ubtn-font-color: var(--color-4-text-contrast);
	}
}
@if variable-exists( palette-primary_5 ) {
	$ubtn-colors: append($ubtn-colors,('color-5' $palette-primary_5 var(--color-5-text-contrast)));
	@if $ubtn-theme-color == 'palette-primary_5' {
		$ubtn-bgcolor: $palette-primary_5;
		$ubtn-font-color: var(--color-5-text-contrast);
	}
}
@if variable-exists( palette-primary-neutral-color ) {
	$ubtn-colors: append($ubtn-colors,('neutral-color' $palette-primary-neutral-color var(--color-neutral-text-contrast)));
	@if $ubtn-theme-color == 'palette-primary-neutral-color' {
		$ubtn-bgcolor: $palette-primary-neutral-color;
		$ubtn-font-color: var(--color-neutral-text-contrast);
	}
}

/* Create single css classes to apply palettes on universal elements. */
$names: background background-color;
@for $i from 1 through length( $names ) {
	@for $color from 1 through length( $colors ) {
		$reference: nth($colors, $color);
		.color#{$color}-#{nth( $names, $i )} {
			@for $each from 1 through length( $colors ) {
				&.color-#{$each}-link-color {
					a {
						color: #{nth($colors, $each)};
					}
					a:hover, a:focus, a:active, a.highlighted {
						color: hover( nth($colors, $color), nth($colors, $each) );
					}
				}
			}
			@if variable-exists( palette-primary-neutral-color ) {
				&.color-neutral-link-color {
					a {
						color: $palette-primary-neutral-color;
					}
					a:hover, a:focus, a:active, a.highlighted {
						color: hover( nth($colors, $color), $palette-primary-neutral-color );
					}
				}
			}
			&-hover {
				&:focus, &:hover {
					#{nth( $names, $i )}: #{$reference} ! important;
				}
			}
		}
	}
	@if variable-exists( palette-primary-neutral-color ) {
		.color-neutral-#{nth($names, $i)} {
			@for $each from 1 through length( $colors) {
				&.color-#{$each}-link-color {
					a {
						color: #{nth($colors, $each)};
					}
					a:hover, a:focus, a:active, a.highlighted {
						color: hover( $palette-primary-neutral-color, nth($colors, $each) );
					}
				}
			}
			&.color-neutral-link-color {
				a {
					color: $palette-primary-neutral-color;
				}
				a:hover, a:focus, a:active, a.highlighted {
					color: hover( $palette-primary-neutral-color, $palette-primary-neutral-color );
				}
			}
		}
	}
}

/*
* Base Colors
*
* Create colors for buttons
* (.button-primary, .button-secondary, etc.)
*/
@if variable-exists( ubtn-colors ) {
	@each $ubtn-color in $ubtn-colors {
		$ubtn-name: nth($ubtn-color, 1);
		$ubtn-background: nth($ubtn-color, 2);
		$ubtn-color: nth($ubtn-color, 3);

		// Crete class for .button-primary
		// and legacy flat .button-primary-flat
		.btn-#{$ubtn-name},
		.btn-#{$ubtn-name}-flat {
			background-color: $ubtn-background;
			border-color: $ubtn-background;
			color: $ubtn-color !important;

			&:visited {
				color: $ubtn-color;
			}

			&:hover,
			&:focus {
				background-color: lighten($ubtn-background, 10%);
				border-color: lighten($ubtn-background, 10%);
				color: $ubtn-color !important;
			}

			&:active,
			&.active,
			&.is-active {
				background-color: desaturate($ubtn-background, 10%);
				border-color: desaturate($ubtn-background, 10%);
				color: darken($ubtn-background, 10%) !important;
			}
		}
	}
}
